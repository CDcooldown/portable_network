// Generated by gencpp from file dmsgs/ActionCommand.msg
// DO NOT EDIT!


#ifndef DMSGS_MESSAGE_ACTIONCOMMAND_H
#define DMSGS_MESSAGE_ACTIONCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <BodyCommand.h>
#include <HeadCommand.h>

namespace dmsgs
{
template <class ContainerAllocator>
struct ActionCommand_
{
  typedef ActionCommand_<ContainerAllocator> Type;

  ActionCommand_()
    : bodyCmd()
    , headCmd()  {
    }
  ActionCommand_(const ContainerAllocator& _alloc)
    : bodyCmd(_alloc)
    , headCmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::dmsgs::BodyCommand_<ContainerAllocator>  _bodyCmd_type;
  _bodyCmd_type bodyCmd;

   typedef  ::dmsgs::HeadCommand_<ContainerAllocator>  _headCmd_type;
  _headCmd_type headCmd;





  typedef boost::shared_ptr< ::dmsgs::ActionCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmsgs::ActionCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ActionCommand_

typedef ::dmsgs::ActionCommand_<std::allocator<void> > ActionCommand;

typedef boost::shared_ptr< ::dmsgs::ActionCommand > ActionCommandPtr;
typedef boost::shared_ptr< ::dmsgs::ActionCommand const> ActionCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmsgs::ActionCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmsgs::ActionCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dmsgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'dmsgs': ['/home/ubuntu/dancer-workspace/workspaces/lib/src/dmsgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dmsgs::ActionCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmsgs::ActionCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmsgs::ActionCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmsgs::ActionCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmsgs::ActionCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmsgs::ActionCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmsgs::ActionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c989d04d772c1efd228275998bdce3a3";
  }

  static const char* value(const ::dmsgs::ActionCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc989d04d772c1efdULL;
  static const uint64_t static_value2 = 0x228275998bdce3a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::dmsgs::ActionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmsgs/ActionCommand";
  }

  static const char* value(const ::dmsgs::ActionCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmsgs::ActionCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BodyCommand bodyCmd\n\
HeadCommand headCmd\n\
================================================================================\n\
MSG: dmsgs/BodyCommand\n\
float32 x\n\
float32 y\n\
float32 t\n\
\n\
uint8 gait_type\n\
\n\
uint8 CROUCH       = 0\n\
uint8 WALK_POS     = 1\n\
uint8 KICK_BALL    = 2\n\
uint8 TURN         = 3\n\
uint8 BACKWARD     = 4\n\
uint8 TRANSLATE    = 5\n\
\n\
uint8 GOALIELEFT    = 7\n\
uint8 GOALIEMID     = 8\n\
uint8 GOALIERIGHT   = 9\n\
\n\
================================================================================\n\
MSG: dmsgs/HeadCommand\n\
float32 pitch\n\
float32 yaw\n\
float32 pitchSpeed\n\
float32 yawSpeed\n\
\n\
";
  }

  static const char* value(const ::dmsgs::ActionCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmsgs::ActionCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bodyCmd);
      stream.next(m.headCmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmsgs::ActionCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmsgs::ActionCommand_<ContainerAllocator>& v)
  {
    s << indent << "bodyCmd: ";
    s << std::endl;
    Printer< ::dmsgs::BodyCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.bodyCmd);
    s << indent << "headCmd: ";
    s << std::endl;
    Printer< ::dmsgs::HeadCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.headCmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMSGS_MESSAGE_ACTIONCOMMAND_H
