// Generated by gencpp from file dmsgs/BodyCommand.msg
// DO NOT EDIT!


#ifndef DMSGS_MESSAGE_BODYCOMMAND_H
#define DMSGS_MESSAGE_BODYCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dmsgs
{
template <class ContainerAllocator>
struct BodyCommand_
{
  typedef BodyCommand_<ContainerAllocator> Type;

  BodyCommand_()
    : x(0.0)
    , y(0.0)
    , t(0.0)
    , gait_type(0)  {
    }
  BodyCommand_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , t(0.0)
    , gait_type(0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _t_type;
  _t_type t;

   typedef uint8_t _gait_type_type;
  _gait_type_type gait_type;



  enum {
    CROUCH = 0u,
    WALK_POS = 1u,
    KICK_BALL = 2u,
    TURN = 3u,
    BACKWARD = 4u,
    TRANSLATE = 5u,
    GOALIELEFT = 7u,
    GOALIEMID = 8u,
    GOALIERIGHT = 9u,
  };


  typedef boost::shared_ptr< ::dmsgs::BodyCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dmsgs::BodyCommand_<ContainerAllocator> const> ConstPtr;

}; // struct BodyCommand_

typedef ::dmsgs::BodyCommand_<std::allocator<void> > BodyCommand;

typedef boost::shared_ptr< ::dmsgs::BodyCommand > BodyCommandPtr;
typedef boost::shared_ptr< ::dmsgs::BodyCommand const> BodyCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dmsgs::BodyCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dmsgs::BodyCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dmsgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'dmsgs': ['/home/ubuntu/dancer-workspace/workspaces/lib/src/dmsgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dmsgs::BodyCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dmsgs::BodyCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmsgs::BodyCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dmsgs::BodyCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmsgs::BodyCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dmsgs::BodyCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dmsgs::BodyCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9931185be1377c4a870fc3dd472ad4c5";
  }

  static const char* value(const ::dmsgs::BodyCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9931185be1377c4aULL;
  static const uint64_t static_value2 = 0x870fc3dd472ad4c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::dmsgs::BodyCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dmsgs/BodyCommand";
  }

  static const char* value(const ::dmsgs::BodyCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dmsgs::BodyCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n\
float32 y\n\
float32 t\n\
\n\
uint8 gait_type\n\
\n\
uint8 CROUCH       = 0\n\
uint8 WALK_POS     = 1\n\
uint8 KICK_BALL    = 2\n\
uint8 TURN         = 3\n\
uint8 BACKWARD     = 4\n\
uint8 TRANSLATE    = 5\n\
\n\
uint8 GOALIELEFT    = 7\n\
uint8 GOALIEMID     = 8\n\
uint8 GOALIERIGHT   = 9\n\
";
  }

  static const char* value(const ::dmsgs::BodyCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dmsgs::BodyCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.t);
      stream.next(m.gait_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dmsgs::BodyCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dmsgs::BodyCommand_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "t: ";
    Printer<float>::stream(s, indent + "  ", v.t);
    s << indent << "gait_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gait_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DMSGS_MESSAGE_BODYCOMMAND_H
